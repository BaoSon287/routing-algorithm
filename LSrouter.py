####################################################
# LSrouter.py
# Name:
# HUID:
#####################################################

from router import Router


class LSrouter(Router):
    """Link state routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeatTime):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeatTime = heartbeatTime
        self.last_time = 0
        # TODO
        #   add your own class fields and initialization code here
        pass

    def handlePacket(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.isTraceroute():
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dstAddr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            pass
        else:
            # Hint: this is a routing packet generated by your routing protocol
            # If the sequence number is higher and the received link state is different
            #   update the local copy of the link state
            #   update the forwarding table
            #   broadcast the packet to other neighbors
            pass

    def handleNewLink(self, port, endpoint, cost):
        """Handle new link."""
        # TODO
        #   update local data structures and forwarding table
        #   broadcast the new link state of this router to all neighbors
        pass

    def handleRemoveLink(self, port):
        """Handle removed link."""
        # TODO
        #   update local data structures and forwarding table
        #   broadcast the new link state of this router to all neighbors
        pass

    def handleTime(self, timeMillisecs):
        """Handle current time."""
        if timeMillisecs - self.last_time >= self.heartbeatTime:
            self.last_time = timeMillisecs
            # TODO
            #   broadcast the link state of this router to all neighbors
            pass

    def debugString(self):
        """Generate a string for debugging in network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return ""
